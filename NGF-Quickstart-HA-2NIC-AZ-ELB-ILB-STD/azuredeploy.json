{
  "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "adminPassword": {
      "type": "securestring",
      "metadata": {
        "description": "Password for the Virtual Machine."
      }
    },
    "prefix": {
      "type": "string",
      "metadata": {
        "description": "identifying prefix for all VM's being build. e.g WeProd would become WeProd-VM-NGF (Max 19 char, no spaces, [A-Za-z0-9]"
      }
    },
    "vNetAddressSpace": {
      "type": "string",
      "metadata": {
        "description": "Network range of the VNET (e.g. 172.16.136.0/22)"
      },
      "defaultValue": "172.16.136.0/22"
    },
    "subnetNGF-external": {
      "type": "string",
      "metadata": {
        "description": "Network range of the Subnet containing the NextGen Firewall (e.g. 172.16.136.0/24)"
      },
      "defaultValue": "172.16.136.0/25"
    },
    "subnetNGF-internal": {
      "type": "string",
      "metadata": {
        "description": "Network range of the Subnet containing the NextGen Firewall (e.g. 172.16.136.0/24)"
      },
      "defaultValue": "172.16.136.128/25"
    },
    "subnetRed": {
      "type": "string",
      "metadata": {
        "description": "Network range of the red subnet (e.g. 172.16.137.0/24)"
      },
      "defaultValue": "172.16.137.0/24"
    },
    "subnetGreen": {
      "type": "string",
      "metadata": {
        "description": "Network range of the green subnet (e.g. 172.16.138.0/24)"
      },
      "defaultValue": "172.16.138.0/24"
    },
    "imageSKU": {
      "type": "string",
      "metadata": {
        "description": "SKU Hourly (PAYG) or BYOL (Bring your own license)"
      },
      "allowedValues": [
        "hourly",
        "byol"
      ],
      "defaultValue": "byol"
    },
    "vmSize": {
      "type": "string",
      "metadata": {
        "description": "Size of the VMs to be created"
      },
      "allowedValues": [ "Standard_F1s", "Standard_F2s", "Standard_F4s", "Standard_F8s", "Standard_D1_v2", "Standard_D2_v2", "Standard_D3_v2", "Standard_D4_v2", "Standard_D2_v3", "Standard_D4_v3", "Standard_D8_v3" ],
      "defaultValue": "Standard_F1s"
    },
    "version": {
      "type": "string",
      "metadata": {
        "description": "Version of the Barracuda CloudGen Firewall to install"
      },
      "allowedValues": [ "lastest", "7.2.112901", "7.1.210401", "7.0.407401", "", "6.2.411301" ],
      "defaultValue": "latest"
    },
    "ccManaged": {
      "type": "string",
      "allowedValues": [
        "yes",
        "no"
      ],
      "defaultValue": "no"
    },
    "ccClusterName": {
      "type": "string",
      "defaultValue": ""
    },
    "ccRangeId": {
      "type": "string",
      "defaultValue": ""
    },
    "ccIpAddress": {
      "type": "string",
      "defaultValue": ""
    },
    "ccSecret": {
      "type": "securestring",
      "defaultValue": ""
    }
  },
  "variables": {
    "computeApiVersion": "2017-03-30",
    "networkApiVersion": "2017-08-01",
    "imagePublisher": "barracudanetworks",
    "imageOffer": "barracuda-ng-firewall",
    "nsgName": "[concat(parameters('prefix'),'-NSG-NGF')]",
    "vNetName": "[concat(parameters('prefix'),'-VNET')]",
    "vNetID": "[resourceId('Microsoft.Network/virtualNetworks',variables('vNetName'))]",
    "subnetNameNGF-external": "[concat(parameters('prefix'),'-SUBNET-NGF-EXTERNAL')]",
    "subnetNameNGF-internal": "[concat(parameters('prefix'),'-SUBNET-NGF-INTERNAL')]",
    "subnetRefNGF-external": "[concat(variables('vnetID'),'/subnets/',variables('subnetNameNGF-external'))]",
    "subnetRefNGF-internal": "[concat(variables('vnetID'),'/subnets/',variables('subnetNameNGF-internal'))]",
    "subnetNameRed": "[concat(parameters('prefix'),'-SUBNET-RED')]",
    "subnetRefRed": "[concat(variables('vnetID'),'/subnets/',variables('subnetNameRed'))]",
    "subnetNameGreen": "[concat(parameters('prefix'),'-SUBNET-GREEN')]",
    "subnetRefGreen": "[concat(variables('vnetID'),'/subnets/',variables('subnetNameGreen'))]",
    "rtableNameRed": "[concat( parameters('prefix'), '-RT-FOR-RED' )]",
    "rtableRefRed": "[resourceID('Microsoft.Network/routeTables',variables('rtableNameRed'))]",
    "rtableNameGreen": "[concat( parameters('prefix'), '-RT-FOR-GREEN' )]",
    "rtableRefGreen": "[resourceID('Microsoft.Network/routeTables',variables('rtableNameGreen'))]",
    "ngfVmName1": "[concat(parameters('prefix'),'-VM-NGF-A')]",
    "ngfVmName2": "[concat(parameters('prefix'),'-VM-NGF-B')]",
    "ngfNicName1-external": "[concat(variables('ngfVmName1'),'-NIC-EXT')]",
    "ngfNicName1-internal": "[concat(variables('ngfVmName1'),'-NIC-INT')]",
    "ngfNicName2-external": "[concat(variables('ngfVmName2'),'-NIC-EXT')]",
    "ngfNicName2-internal": "[concat(variables('ngfVmName2'),'-NIC-INT')]",
    "ngfPIPAddressName1": "[concat(variables('ngfVmName1'),'-PIP')]",
    "ngfPIPAddressName2": "[concat(variables('ngfVmName2'),'-PIP')]",
    "ngfPIPAddressType": "Static",
    "lbPIPAddressName": "[concat(parameters('prefix'),'-NGF-LB-PIP')]",
    "dnsNameForNGF": "[toLower( concat( parameters('prefix'), '-ngf-', uniqueString(resourceGroup().id) ) )]",
    "lbName-external": "[concat(parameters('prefix'),'-ELB-NGF')]",
    "lbName-internal": "[concat(parameters('prefix'),'-ILB-NGF')]",
    "lbID-external": "[resourceId('Microsoft.Network/loadBalancers',variables('lbName-external'))]",
    "lbID-internal": "[resourceId('Microsoft.Network/loadBalancers',variables('lbName-internal'))]",
    "lbPIPID": "[resourceId('Microsoft.Network/publicIPAddresses',variables('lbPIPAddressName'))]",
    "lbFrontEndPoolID-external": "[concat(variables('lbID-external'),'/frontendIPConfigurations/loadBalancerFrontend')]",
    "lbFrontEndPoolID-internal": "[concat(variables('lbID-internal'),'/frontendIPConfigurations/loadBalancerFrontend')]",
    "lbBackEndPoolID-external": "[concat(variables('lbID-external'),'/backendAddressPools/loadBalancerBackend')]",
    "lbBackEndPoolID-internal": "[concat(variables('lbID-internal'),'/backendAddressPools/loadBalancerBackend')]",
    "lbProbeID-external": "[concat(variables('lbID-external'),'/probes/TinaProbe')]",
    "lbProbeID-internal": "[concat(variables('lbID-internal'),'/probes/HAProbe')]",
    "lbIPAddress-internal": "[concat( variables( 'ngfSubnetAddrSplit-internal' )[0], '.', variables( 'ngfSubnetAddrSplit-internal' )[1], '.', variables( 'ngfSubnetAddrSplit-internal' )[2], '.', add( int( variables( 'ngfSubnetAddrSplit-internal' )[3]), 10 ))]",
    "adminUsername": "notused",
    "singleQuotationMark": "'",
    "ngfSubnetSplit-external": "[split( parameters( 'subnetNGF-external' ), '/' )]",
    "ngfSubnetSplit-internal": "[split( parameters( 'subnetNGF-internal' ), '/' )]",
    "ngfSubnetAddrSplit-external": "[split( variables( 'ngfSubnetSplit-external' )[0], '.' )]",
    "ngfSubnetAddrSplit-internal": "[split( variables( 'ngfSubnetSplit-internal' )[0], '.' )]",
    "ngfSubnetMask-external": "[variables( 'ngfSubnetSplit-external' )[1]]",
    "ngfSubnetMask-internal": "[variables( 'ngfSubnetSplit-internal' )[1]]",
    "ngfSubnetDefaultGw-external": "[concat( variables( 'ngfSubnetAddrSplit-external' )[0], '.', variables( 'ngfSubnetAddrSplit-external' )[1], '.', variables( 'ngfSubnetAddrSplit-external' )[2], '.', add( int( variables( 'ngfSubnetAddrSplit-external' )[3]), 1 ))]",
    "ngfVmAddress1-external": "[concat( variables( 'ngfSubnetAddrSplit-external' )[0], '.', variables( 'ngfSubnetAddrSplit-external' )[1], '.', variables( 'ngfSubnetAddrSplit-external' )[2], '.', add( int( variables( 'ngfSubnetAddrSplit-external' )[3]), 4 ))]",
    "ngfVmAddress1-internal": "[concat( variables( 'ngfSubnetAddrSplit-internal' )[0], '.', variables( 'ngfSubnetAddrSplit-external' )[1], '.', variables( 'ngfSubnetAddrSplit-internal' )[2], '.', add( int( variables( 'ngfSubnetAddrSplit-internal' )[3]), 4 ))]",
    "ngfVmAddress2-external": "[concat( variables( 'ngfSubnetAddrSplit-external' )[0], '.', variables( 'ngfSubnetAddrSplit-external' )[1], '.', variables( 'ngfSubnetAddrSplit-external' )[2], '.', add( int( variables( 'ngfSubnetAddrSplit-external' )[3]), 5 ))]",
    "ngfVmAddress2-internal": "[concat( variables( 'ngfSubnetAddrSplit-internal' )[0], '.', variables( 'ngfSubnetAddrSplit-external' )[1], '.', variables( 'ngfSubnetAddrSplit-internal' )[2], '.', add( int( variables( 'ngfSubnetAddrSplit-internal' )[3]), 5 ))]",
    "ngfCustomData1": "[Base64(concat( '#!/bin/bash\n\n/opb/cloud-setmip ', variables('ngfVmAddress1-external'), ' ', variables( 'ngfSubnetMask-external' ), ' ', variables( 'ngfSubnetDefaultGw-external' ), '\n', 'echo ', variables('singleQuotationMark'), parameters( 'adminPassword' ), variables('singleQuotationMark'), ' | /opb/create-dha -s S1 -c -o ', variables('ngfVmAddress2-external'), ' -n ', variables( 'ngfSubnetMask-external' ), ' -g ', variables( 'ngfSubnetDefaultGw-external' ), '\n'))]",
    "ngfCustomData2": "[Base64('\n')]"
  },
  "resources": [
    {
      "apiVersion": "[variables('networkApiVersion')]",
      "type": "Microsoft.Network/networkSecurityGroups",
      "name": "[variables('nsgName')]",
      "location": "[resourceGroup().location]",
      "properties": {
        "securityRules": [
          {
            "name": "AllowAnyInbound",
            "properties": {
              "description": "Allow Any",
              "protocol": "*",
              "sourcePortRange": "*",
              "destinationPortRange": "1-65535",
              "sourceAddressPrefix": "*",
              "destinationAddressPrefix": "*",
              "access": "Allow",
              "priority": 100,
              "direction": "Inbound"
            }
          },
          {
            "name": "AllowAnyOutbound",
            "properties": {
              "description": "Allow Any",
              "protocol": "*",
              "sourcePortRange": "*",
              "destinationPortRange": "1-65535",
              "sourceAddressPrefix": "*",
              "destinationAddressPrefix": "*",
              "access": "Allow",
              "priority": 100,
              "direction": "Outbound"
            }
          }
        ]
      }
    },
    {
      "apiVersion": "[variables('networkApiVersion')]",
      "type": "Microsoft.Network/virtualNetworks",
      "name": "[variables('vNetName')]",
      "location": "[resourceGroup().location]",
      "dependsOn": [
        "[variables('nsgName')]"
      ],
      "properties": {
        "addressSpace": {
          "addressPrefixes": [
            "[parameters('vNetAddressSpace')]"
          ]
        },
        "subnets": [
          {
            "name": "[variables('subnetNameNGF-external')]",
            "properties": {
              "addressPrefix": "[parameters('subnetNGF-external')]",
              "networkSecurityGroup": {
                "id": "[resourceId('Microsoft.Network/networkSecurityGroups', variables('nsgName'))]"
              }
            }
          },
          {
            "name": "[variables('subnetNameNGF-internal')]",
            "properties": {
              "addressPrefix": "[parameters('subnetNGF-internal')]",
              "networkSecurityGroup": {
                "id": "[resourceId('Microsoft.Network/networkSecurityGroups', variables('nsgName'))]"
              }
            }
          },
          {
            "name": "[variables('subnetNameRed')]",
            "properties": {
              "addressPrefix": "[parameters('subnetRed')]",
              "networkSecurityGroup": {
                "id": "[resourceId('Microsoft.Network/networkSecurityGroups', variables('nsgname'))]"
              },
              "routeTable": {
                "id": "[variables('rtableRefRed')]"
              }
            }
          },
          {
            "name": "[variables('subnetNameGreen')]",
            "properties": {
              "addressPrefix": "[parameters('subnetGreen')]",
              "networkSecurityGroup": {
                "id": "[resourceId('Microsoft.Network/networkSecurityGroups', variables('nsgname'))]"
              },
              "routeTable": {
                "id": "[variables('rtableRefGreen')]"
              }
            }
          }
        ]
      }
    },
    {
      "apiVersion": "[variables( 'networkApiVersion' )]",
      "type": "Microsoft.Network/routeTables",
      "name": "[variables('rtableNameRed')]",
      "location": "[resourceGroup().location]",
      "properties": {
        "routes": [
          {
            "name": "to-Internet",
            "properties": {
              "addressPrefix": "0.0.0.0/0",
              "nextHopType": "VirtualAppliance",
              "nextHopIpAddress": "[variables('lbIPAddress-internal')]"
            }
          },
          {
            "name": "to-Green",
            "properties": {
              "addressPrefix": "[parameters('subnetGreen')]",
              "nextHopType": "VirtualAppliance",
              "nextHopIpAddress": "[variables('lbIPAddress-internal')]"
            }
          }
        ],
        "subnets": "[variables('subnetRefRed')]"
      }
    },
    {
      "apiVersion": "[variables( 'networkApiVersion' )]",
      "type": "Microsoft.Network/routeTables",
      "name": "[variables('rtableNameGreen')]",
      "location": "[resourceGroup().location]",
      "properties": {
        "routes": [
          {
            "name": "to-Internet",
            "properties": {
              "addressPrefix": "0.0.0.0/0",
              "nextHopType": "VirtualAppliance",
              "nextHopIpAddress": "[variables('lbIPAddress-internal')]"
            }
          },
          {
            "name": "to-Red",
            "properties": {
              "addressPrefix": "[parameters('subnetRed')]",
              "nextHopType": "VirtualAppliance",
              "nextHopIpAddress": "[variables('lbIPAddress-internal')]"
            }
          }
        ],
        "subnets": "[variables('subnetRefGreen')]"
      }
    },
    {
      "apiVersion": "[variables('networkApiVersion')]",
      "type": "Microsoft.Network/publicIPAddresses",
      "name": "[variables('lbPIPAddressName')]",
      "location": "[resourceGroup().location]",
      "sku": {
        "name": "Standard"
      },
      "properties": {
        "publicIPAllocationMethod": "[variables('ngfPIPAddressType')]",
        "dnsSettings": {
          "domainNameLabel": "[variables('dnsNameForNGF')]"
        }
      }
    },
    {
      "apiVersion": "[variables('networkApiVersion')]",
      "name": "[variables('lbName-external')]",
      "type": "Microsoft.Network/loadBalancers",
      "location": "[resourceGroup().location]",
      "sku": {
        "name": "Standard"
      },
      "comments": "External LoadBalancer for the Barracuda Next Gen Firewall F cluster",
      "tags": {
        "displayName": "NGFLB"
      },
      "dependsOn": [
        "[concat('Microsoft.Network/publicIPAddresses/', variables('lbPIPAddressName'))]",
        "[variables('vNetID')]"
      ],
      "properties": {
        "frontendIPConfigurations": [
          {
            "name": "loadBalancerFrontEnd",
            "properties": {
              "publicIPAddress": {
                "id": "[variables('lbPIPID')]"
              }
            }
          }
        ],
        "backendAddressPools": [
          {
            "name": "loadBalancerBackend"
          }
        ],
        "loadBalancingRules": [
          {
            "name": "IPSEC-IKE",
            "properties": {
              "frontendIPConfiguration": {
                "id": "[variables('lbFrontEndPoolID-external')]"
              },
              "backendAddressPool": {
                "id": "[variables('lbBackEndPoolID-external')]"
              },
              "protocol": "Udp",
              "frontendPort": 500,
              "backendPort": 500,
              "enableFloatingIP": false,
              "idleTimeoutInMinutes": 5,
              "probe": {
                "id": "[variables('lbProbeID-external')]"
              }
            }
          },
          {
            "name": "IPSEC-NATT",
            "properties": {
              "frontendIPConfiguration": {
                "id": "[variables('lbFrontEndPoolID-external')]"
              },
              "backendAddressPool": {
                "id": "[variables('lbBackEndPoolID-external')]"
              },
              "protocol": "Udp",
              "frontendPort": 4500,
              "backendPort": 4500,
              "enableFloatingIP": false,
              "idleTimeoutInMinutes": 5,
              "probe": {
                "id": "[variables('lbProbeID-external')]"
              }
            }
          },
          {
            "name": "TINA-UDP",
            "properties": {
              "frontendIPConfiguration": {
                "id": "[variables('lbFrontEndPoolID-external')]"
              },
              "backendAddressPool": {
                "id": "[variables('lbBackEndPoolID-external')]"
              },
              "protocol": "Udp",
              "frontendPort": 691,
              "backendPort": 691,
              "enableFloatingIP": false,
              "idleTimeoutInMinutes": 5,
              "probe": {
                "id": "[variables('lbProbeID-external')]"
              }
            }
          },
          {
            "name": "TINA-TCP",
            "properties": {
              "frontendIPConfiguration": {
                "id": "[variables('lbFrontEndPoolID-external')]"
              },
              "backendAddressPool": {
                "id": "[variables('lbBackEndPoolID-external')]"
              },
              "protocol": "Tcp",
              "frontendPort": 691,
              "backendPort": 691,
              "enableFloatingIP": false,
              "idleTimeoutInMinutes": 5,
              "probe": {
                "id": "[variables('lbProbeID-external')]"
              }
            }
          }
        ],
        "probes": [
          {
            "name": "TinaProbe",
            "properties": {
              "protocol": "Tcp",
              "port": 691,
              "intervalInSeconds": 5,
              "numberOfProbes": 2
            }
          }
        ]
      }
    },
    {
      "apiVersion": "[variables('networkApiVersion')]",
      "name": "[variables('lbName-internal')]",
      "type": "Microsoft.Network/loadBalancers",
      "location": "[resourceGroup().location]",
      "sku": {
        "name": "Standard"
      },
      "dependsOn": [
        "[variables('vNetID')]"
      ],
      "comments": "Internal LoadBalancer for the Barracuda Next Gen Firewall F cluster",
      "tags": {
        "displayName": "NGFLB-Internal"
      },
      "properties": {
        "frontendIPConfigurations": [
          {
            "name": "loadBalancerFrontEnd",
            "properties": {
              "privateIPAddress": "172.16.136.140",
              "privateIPAllocationMethod": "Static",
              "subnet": {
                "id": "[variables('subnetRefNGF-internal')]"
              }
            }
          }
        ],
        "backendAddressPools": [
          {
            "name": "loadBalancerBackend"
          }
        ],
        "loadBalancingRules": [
          {
            "name": "lbrule",
            "properties": {
              "frontendIPConfiguration": {
                "id": "[concat( resourceId('Microsoft.Network/loadBalancers', variables('lbName-internal')), '/frontendIpConfigurations/loadBalancerFrontEnd' )]"
              },
              "frontendPort": 0,
              "backendPort": 0,
              "enableFloatingIP": true,
              "idleTimeoutInMinutes": 15,
              "protocol": "All",
              "loadDistribution": "Default",
              "backendAddressPool": {
                "id": "[concat( resourceId('Microsoft.Network/loadBalancers', variables('lbName-internal')), '/backendAddressPools/loadBalancerBackend')]"
              },
              "probe": {
                "id": "[concat( resourceId('Microsoft.Network/loadBalancers', variables('lbName-internal')), '/probes/HAProbe')]"
              }
            }
          }
        ],
        "probes": [
          {
            "name": "HAProbe",
            "properties": {
              "protocol": "Tcp",
              "port": 65500,
              "intervalInSeconds": 5,
              "numberOfProbes": 2
            }
          }
        ]
      }
    },
    {
      "apiVersion": "[variables('networkApiVersion')]",
      "type": "Microsoft.Network/publicIPAddresses",
      "zones": [
        "1"
      ],
      "name": "[variables('ngfPIPAddressName1')]",
      "location": "[resourceGroup().location]",
      "sku": {
        "name": "Standard"
      },
      "properties": {
        "publicIPAllocationMethod": "[variables('ngfPIPAddressType')]"
      }
    },
    {
      "apiVersion": "[variables('networkApiVersion')]",
      "type": "Microsoft.Network/publicIPAddresses",
      "zones": [
        "2"
      ],
      "name": "[variables('ngfPIPAddressName2')]",
      "location": "[resourceGroup().location]",
      "sku": {
        "name": "Standard"
      },
      "properties": {
        "publicIPAllocationMethod": "[variables('ngfPIPAddressType')]"
      }
    },
    {
      "apiVersion": "[variables('networkApiVersion')]",
      "type": "Microsoft.Network/networkInterfaces",
      "name": "[variables('ngfNicName1-external')]",
      "location": "[resourceGroup().location]",
      "dependsOn": [
        "[concat('Microsoft.Network/publicIPAddresses/', variables('ngfPIPAddressName1'))]",
        "[concat('Microsoft.Network/virtualNetworks/', variables('vNetName'))]",
        "[concat('Microsoft.Network/loadBalancers/', variables('lbName-external'))]"
      ],
      "properties": {
        "enableIPForwarding": true,
        "ipConfigurations": [
          {
            "name": "external",
            "properties": {
              "privateIPAllocationMethod": "Static",
              "privateIPAddress": "[variables( 'ngfVmAddress1-external' )]",
              "publicIPAddress": {
                "id": "[resourceId('Microsoft.Network/publicIPAddresses',variables('ngfPIPAddressName1'))]"
              },
              "subnet": {
                "id": "[variables('subnetRefNGF-external')]"
              },
              "loadBalancerBackendAddressPools": [
                {
                  "id": "[concat(variables('lbID-external'), '/backendAddressPools/loadBalancerBackend')]"
                }
              ]
            }
          }
        ]
      }
    },
    {
      "apiVersion": "[variables('networkApiVersion')]",
      "type": "Microsoft.Network/networkInterfaces",
      "name": "[variables('ngfNicName1-internal')]",
      "location": "[resourceGroup().location]",
      "dependsOn": [
        "[concat('Microsoft.Network/virtualNetworks/', variables('vNetName'))]",
        "[concat('Microsoft.Network/loadBalancers/', variables('lbName-external'))]"
      ],
      "properties": {
        "enableIPForwarding": true,
        "ipConfigurations": [
          {
            "name": "ipconfig1",
            "properties": {
              "privateIPAllocationMethod": "Static",
              "privateIPAddress": "[variables( 'ngfVmAddress1-internal' )]",
              "subnet": {
                "id": "[variables('subnetRefNGF-internal')]"
              },
              "loadBalancerBackendAddressPools": [
                {
                  "id": "[concat(variables('lbID-internal'), '/backendAddressPools/loadBalancerBackend')]"
                }
              ]
            }
          }
        ]
      }
    },
    {
      "apiVersion": "[variables('networkApiVersion')]",
      "type": "Microsoft.Network/networkInterfaces",
      "name": "[variables('ngfNicName2-external')]",
      "location": "[resourceGroup().location]",
      "dependsOn": [
        "[concat('Microsoft.Network/publicIPAddresses/', variables('ngfPIPAddressName2'))]",
        "[concat('Microsoft.Network/virtualNetworks/', variables('vNetName'))]",
        "[concat('Microsoft.Network/loadBalancers/', variables('lbName-external'))]"
      ],
      "properties": {
        "enableIPForwarding": false,
        "ipConfigurations": [
          {
            "name": "external",
            "properties": {
              "privateIPAllocationMethod": "Static",
              "privateIPAddress": "[variables( 'ngfVmAddress2-external' )]",
              "publicIPAddress": {
                "id": "[resourceId('Microsoft.Network/publicIPAddresses',variables('ngfPIPAddressName2'))]"
              },
              "subnet": {
                "id": "[variables('subnetRefNGF-external')]"
              },
              "loadBalancerBackendAddressPools": [
                {
                  "id": "[concat(variables('lbID-external'), '/backendAddressPools/loadBalancerBackend')]"
                }
              ]
            }
          }
        ]
      }
    },
    {
      "apiVersion": "[variables('networkApiVersion')]",
      "type": "Microsoft.Network/networkInterfaces",
      "name": "[variables('ngfNicName2-internal')]",
      "location": "[resourceGroup().location]",
      "dependsOn": [
        "[concat('Microsoft.Network/virtualNetworks/', variables('vNetName'))]",
        "[concat('Microsoft.Network/loadBalancers/', variables('lbName-external'))]"
      ],
      "properties": {
        "enableIPForwarding": false,
        "ipConfigurations": [
          {
            "name": "internal",
            "properties": {
              "privateIPAllocationMethod": "Static",
              "privateIPAddress": "[variables( 'ngfVmAddress2-internal' )]",
              "subnet": {
                "id": "[variables('subnetRefNGF-internal')]"
              },
              "loadBalancerBackendAddressPools": [
                {
                  "id": "[concat(variables('lbID-internal'), '/backendAddressPools/loadBalancerBackend')]"
                }
              ]
            }
          }
        ]
      }
    },
    {
      "condition": "[equals(parameters('ccManaged'),'no')]",
      "apiVersion": "[variables('computeApiVersion')]",
      "type": "Microsoft.Compute/virtualMachines",
      "zones": [
        "1"
      ],
      "name": "[variables('ngfVmName1')]",
      "location": "[resourceGroup().location]",
      "plan": {
        "name": "[parameters('imageSKU')]",
        "Product": "[variables('imageOffer')]",
        "Publisher": "[variables('imagePublisher')]"
      },
      "dependsOn": [
        "[resourceId('Microsoft.Network/networkInterfaces/', variables('ngfNicName1-external'))]",
        "[resourceId('Microsoft.Network/networkInterfaces/', variables('ngfNicName1-internal'))]"
      ],
      "properties": {
        "hardwareProfile": {
          "vmSize": "[parameters('vmSize')]"
        },
        "osProfile": {
          "computerName": "[variables('ngfVmName1')]",
          "adminUsername": "[variables('adminUsername')]",
          "adminPassword": "[parameters('adminPassword')]",
          "customData": "[base64(concat('#!/bin/bash\n\n', '/opt/phion/bin/editconf -f /opt/phion/config/configroot/boxnet.conf -d REFS -s gendev_eth0\n', '/opt/phion/bin/editconf -f /opt/phion/config/configroot/boxnet.conf -d RENAMED -s gendev_eth0\n', '/opt/phion/bin/cloud-setmip ', variables('ngfVmAddress1-external'), ' ', variables( 'ngfSubnetMask-external' ), ' ', variables( 'ngfSubnetDefaultGw-external' ), ' >> /tmp/setmip.log'))]"
        },
        "storageProfile": {
          "imageReference": {
            "publisher": "[variables('imagePublisher')]",
            "offer": "[variables('imageOffer')]",
            "sku": "[parameters('imageSKU')]",
            "version": "[parameters('version')]"
          },
          "osDisk": {
            "name": "[concat(variables('ngfVmName1'),'-osdisk')]",
            "caching": "ReadWrite",
            "createOption": "FromImage"
          }
        },
        "networkProfile": {
          "networkInterfaces": [
            {
              "id": "[resourceId('Microsoft.Network/networkInterfaces',variables('ngfNicName1-external'))]",
              "properties": {
                "primary": true
              }
            },
            {
              "id": "[resourceId('Microsoft.Network/networkInterfaces',variables('ngfNicName1-internal'))]",
              "properties": {
                "primary": false
              }
            }
          ]
        }
      }
    },
    {
      "condition": "[equals(parameters('ccManaged'),'no')]",
      "apiVersion": "[variables('computeApiVersion')]",
      "type": "Microsoft.Compute/virtualMachines",
      "zones": [
        "2"
      ],
      "name": "[variables('ngfVmName2')]",
      "location": "[resourceGroup().location]",
      "plan": {
        "name": "[parameters('imageSKU')]",
        "Product": "[variables('imageOffer')]",
        "Publisher": "[variables('imagePublisher')]"
      },
      "dependsOn": [
        "[resourceId('Microsoft.Network/networkInterfaces/', variables('ngfNicName2-external'))]",
        "[resourceId('Microsoft.Network/networkInterfaces/', variables('ngfNicName2-internal'))]"
      ],
      "properties": {
        "hardwareProfile": {
          "vmSize": "[parameters('vmSize')]"
        },
        "osProfile": {
          "computerName": "[variables('ngfVmName2')]",
          "adminUsername": "[variables('adminUsername')]",
          "adminPassword": "[parameters('adminPassword')]",
          "customData": "[base64(concat('#!/bin/bash\n\n', '/opt/phion/bin/editconf -f /opt/phion/config/configroot/boxnet.conf -d REFS -s gendev_eth0\n', '/opt/phion/bin/editconf -f /opt/phion/config/configroot/boxnet.conf -d RENAMED -s gendev_eth0\n', '/opt/phion/bin/cloud-setmip ', variables('ngfVmAddress2-external'), ' ', variables( 'ngfSubnetMask-external' ), ' ', variables( 'ngfSubnetDefaultGw-external' ), ' >> /tmp/setmip.log'))]"
        },
        "storageProfile": {
          "imageReference": {
            "publisher": "[variables('imagePublisher')]",
            "offer": "[variables('imageOffer')]",
            "sku": "[parameters('imageSKU')]",
            "version": "[parameters('version')]"
          },
          "osDisk": {
            "name": "[concat(variables('ngfVmName2'),'-osdisk')]",
            "caching": "ReadWrite",
            "createOption": "FromImage"
          }
        },
        "networkProfile": {
          "networkInterfaces": [
            {
              "id": "[resourceId('Microsoft.Network/networkInterfaces',variables('ngfNicName2-external'))]",
              "properties": {
                "primary": true
              }
            },
            {
              "id": "[resourceId('Microsoft.Network/networkInterfaces',variables('ngfNicName2-internal'))]",
              "properties": {
                "primary": false
              }
            }
          ]
        }
      }
    }
  ],
  "outputs": {
    "NGF-A": {
      "type": "string",
      "value": "[reference(variables('ngfPIPAddressName1')).ipAddress]"
    },
    "NGF-B": {
      "type": "string",
      "value": "[reference(variables('ngfPIPAddressName2')).ipAddress]"
    },
    "NGF-LB": {
      "type": "string",
      "value": "[reference(variables('lbPIPAddressName')).dnsSettings.fqdn]"
    }
  }
}