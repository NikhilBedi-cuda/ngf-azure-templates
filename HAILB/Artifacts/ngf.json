  {
    "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
    "contentVersion": "0.0.1",
    "parameters": {
      "prefix": {
        "type": "string",
        "defaultValue": "ngf-hailb"
      },
      "sizeNGF": {
        "type": "string",
        "defaultValue": "Standard_F1s"
      },
      "ngfPassword": {
        "type": "secureString"
      },
      "ngfIpMask": {
        "type": "string",
        "defaultValue": "24"
      },
      "netId-gw": {
        "type": "string",
        "defaultValue": ""
      },
      "ilbName": {
        "type": "string",
        "defaultValue": "ngf-hailb-ilb"
      },
      "elbName": {
        "type": "string",
        "defaultValue": "ngf-haelb-elb"
      }
    },
    "variables": {
      "apiVersionAS": "2017-03-30",
      "apiVersionVM": "2017-03-30",
      "apiVersionNetwork": "2017-08-01",
      "ngfName1": "[concat( parameters('prefix'), '-NGF')]",
      "ngfName2": "[concat( parameters('prefix'), '-NGF-HA')]",
      "ngfAsName": "[concat( parameters( 'prefix' ), '-haSet')]",
      "ngfNicName1": "[concat( variables('ngfName1'), '_nic0_', uniqueString( resourceGroup().id ))]",
      "ngfNicName2": "[concat( variables('ngfName2'), '_nic0_', uniqueString( resourceGroup().id ))]",
      "singleQuotationMark": "'",
      "ngfCustomData1": "[Base64(concat( '#!/bin/bash\n\n/opb/cloud-setmip ', variables( 'ngfIpAddress1' ), ' ', parameters( 'ngfIpMask' ), ' ', variables( 'ngfSubnetDefaultGw' ), '\n', 'echo ', variables('singleQuotationMark'), parameters( 'ngfPassword' ), variables('singleQuotationMark'), ' | /opb/create-dha -s S1 -c -o ', variables( 'ngfIpAddress3' ), ' -n ', parameters( 'ngfIpMask' ), ' -g ', variables( 'ngfSubnetDefaultGw' ), '\n'))]",
      "ngfCustomData2": "[Base64('\n')]",
      "ngfPipName1": "[concat( parameters( 'prefix' ), '-pip1' )]",
      "ngfPipName2": "[concat( parameters( 'prefix' ), '-pip2' )]",
      "ngfSubnetSplit": "[split( parameters( 'ngfIpMask' ), '/' )]",
      "ngfSubnetAddrSplit": "[split( variables( 'ngfSubnetSplit' )[0], '.' )]",
      "ngfSubnetMask": "[variables( 'ngfSubnetSplit' )[1]]",
      "ngfSubnetDefaultGw": "[concat( variables( 'ngfSubnetAddrSplit' )[0], '.', variables( 'ngfSubnetAddrSplit' )[1], '.', variables( 'ngfSubnetAddrSplit' )[2], '.', add( int( variables( 'ngfSubnetAddrSplit' )[3]), 1 ))]",
      "ngfIpAddress1": "[concat( variables( 'ngfSubnetAddrSplit' )[0], '.', variables( 'ngfSubnetAddrSplit' )[1], '.', variables( 'ngfSubnetAddrSplit' )[2], '.', add( int( variables( 'ngfSubnetAddrSplit' )[3]), 4 ))]",
      "ngfIpAddress2": "[concat( variables( 'ngfSubnetAddrSplit' )[0], '.', variables( 'ngfSubnetAddrSplit' )[1], '.', variables( 'ngfSubnetAddrSplit' )[2], '.', add( int( variables( 'ngfSubnetAddrSplit' )[3]), 5 ))]",
      "ngfIpAddress3": "[concat( variables( 'ngfSubnetAddrSplit' )[0], '.', variables( 'ngfSubnetAddrSplit' )[1], '.', variables( 'ngfSubnetAddrSplit' )[2], '.', add( int( variables( 'ngfSubnetAddrSplit' )[3]), 6 ))]",
      "ngfIpAddress4": "[concat( variables( 'ngfSubnetAddrSplit' )[0], '.', variables( 'ngfSubnetAddrSplit' )[1], '.', variables( 'ngfSubnetAddrSplit' )[2], '.', add( int( variables( 'ngfSubnetAddrSplit' )[3]), 7 ))]",
    },
    "resources": [
      {
          "type": "Microsoft.Compute/availabilitySets",
          "name": "[variables('ngfAsName')]",
          "apiVersion": "[variables('apiVersionAS')]",
          "sku": {
              "name": "Aligned"
          },
          "location": "[resourceGroup().location]",
          "properties": {
              "platformUpdateDomainCount": 3,
              "platformFaultDomainCount": 2
          }
      },
      {
        "type": "Microsoft.Network/publicIPAddresses",
        "name": "[variables( concat( 'ngfPipName', copyIndex(1)))]",
        "apiVersion": "[variables('apiVersionNetwork')]",
        "location": "[resourceGroup().location]",
        "sku": {
            "name": "Standard"
        },
        "copy": {
          "name": "pipCopyLoop",
          "count": 2
        },
        "properties": {
          "publicIpAllocationMethod": "Static",
          "publicIpAddressVersion": "IPv4"
        }
      },
      {
          "type": "Microsoft.Network/networkInterfaces",
          "name": "[variables( concat( 'ngfNicName', copyIndex(1)))]",
          "apiVersion": "[variables('apiVersionNetwork')]",
          "location": "[resourceGroup().location]",
          "copy": {
            "name": "nicCopyLoop",
            "count": 2
          },
          "properties": {
              "ipConfigurations": [
                  {
                      "name": "external",
                      "properties": {
                          "privateIPAddress": "[parameters( concat('ngfIpAddr', copyIndex(1)))]",
                          "privateIPAllocationMethod": "Static",
                          "subnet": {
                              "id": "[parameters('netId-gw')]"
                          },
                          "privateIPAddressVersion": "IPv4",
                          "publicIpAddress": {
                            "id": "[resourceId( 'Microsoft.Network/publicIPAddresses', variables( concat( 'ngfPipName', copyIndex(1))))]"
                          },
                          "loadBalancerBackendAddressPools": [
                            {
                                  "id": "[concat(resourceId('Microsoft.Network/loadBalancers', parameters('elbName')), '/backendAddressPools/NGFPool-ext')]"
                              }
                          ]
                      }
                  },
                  {
                      "name": "internal",
                      "properties": {
                          "privateIPAddress": "[parameters( concat('ngfIpAddr', copyIndex(2)))]",
                          "privateIPAllocationMethod": "Static",
                          "subnet": {
                              "id": "[parameters('netId-gw')]"
                          },
                          "privateIPAddressVersion": "IPv4",
                          "loadBalancerBackendAddressPools": [
                            {
                                  "id": "[concat(resourceId('Microsoft.Network/loadBalancers', parameters('ilbName')), '/backendAddressPools/NGFPool-int')]"
                              }

                          ]
                      }
                  }
              ],
              "enableAcceleratedNetworking": false,
              "enableIPForwarding": true
          },
          "dependsOn": [
            "[resourceId( 'Microsoft.Network/publicIPAddresses', variables( concat( 'ngfPipName', copyIndex(1))))]"
          ]
      },

      {
        "type": "Microsoft.Compute/virtualMachines",
        "apiVersion": "[variables('apiVersionVM')]",
        "name": "[variables( concat( 'ngfName', copyIndex(1)))]",
        "location": "[resourceGroup().location]",
        "copy": {
          "name": "vmHaCopyLoop",
          "count": 2
        },
        "plan": {
          "name": "byol",
          "product": "barracuda-ng-firewall",
          "publisher": "barracudanetworks"
        },
        "properties": {
          "availabilitySet": {
            "id": "[resourceId('Microsoft.Compute/availabilitySets', variables('ngfAsName'))]"
          },
          "hardwareProfile": {
            "vmSize": "[parameters('sizeNGF')]"
          },
          "storageProfile": {
            "imageReference": {
              "publisher": "barracudanetworks",
              "offer": "barracuda-ng-firewall",
              "sku": "byol",
              "version": "latest"
            },
            "osDisk": {
              "osType": "Linux",
              "createOption": "FromImage",
              "managedDisk": {
                "storageAccountType": "Premium_LRS"
              }
            },
            "dataDisks": []
          },
          "osProfile": {
            "computerName": "[variables( concat( 'ngfName', copyIndex(1)))]",
            "adminUsername": "will-be-replaced-by-root",
            "adminPassword": "[parameters('ngfPassword')]",
            "customData": "[variables( concat( 'ngfCustomData', copyIndex(1)))]"
            },
          "networkProfile": {
            "networkInterfaces": [
                {
                  "id": "[resourceId('Microsoft.Network/networkInterfaces', variables( concat( 'ngfNicName', copyIndex(1))))]"
                }
              ]
          }
          },
          "dependsOn": [
            "[resourceId('Microsoft.Compute/availabilitySets', variables('ngfAsName'))]",
            "[resourceId('Microsoft.Network/networkInterfaces', variables( concat( 'ngfNicName', copyIndex(1))))]"
          ]
        }
      ]
    }
