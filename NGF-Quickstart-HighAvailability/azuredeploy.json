{
  "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "adminPassword": {
      "type": "securestring",
      "metadata": {
        "description": "Password for the Virtual Machine."
      }
    },
    "prefix": {
      "type": "string",
      "metadata": {
          "description": "identifying prefix for all VM's being build. e.g WeProd would become WeProd-VM-NGF (Max 19 char, no spaces, [A-Za-z0-9]"
      }
    },
    "vNetPrefix": {
      "type": "string",
      "metadata": {
          "description": "Network range of the VNET (e.g. 172.16.136.0/22)"
      }
    },
    "subnetPrefixNGF": {
        "type": "string",
        "metadata": {
            "description": "Network range of the Subnet containing the NextGen Firewall (e.g. 172.16.136.0/24)"
        }
    },
    "imageSKU": {
      "type": "string",
      "metadata": {
          "description": "SKU Hourly (PAYG) or BYOL (Bring your own license)"
      },
      "allowedValues": [
          "hourly",
          "byol"
      ]
    },
    "vmSize": {
      "type": "string",
      "allowedValues": [
        "Standard_A1_v2",
        "Standard_A2_v2",
        "Standard_A3_v2",
        "Standard_A4_v2",
        "Standard_D1",
        "Standard_D2",
        "Standard_D3",
        "Standard_D4",
        "Standard_D1_v2",
        "Standard_D2_v2",
        "Standard_D3_v2",
        "Standard_D4_v2",
        "Standard_DS1_v2",
        "Standard_DS2_v2",
        "Standard_DS3_v2",
        "Standard_DS4_v2",
        "Standard_F1",
        "Standard_F2",
        "Standard_F4",
        "Standard_F8",
        "Standard_FS1",
        "Standard_FS2",
        "Standard_FS4",
        "Standard_FS8"
      ],
      "metadata": {
        "description": "Size of the VMs to be created"
      }
    },
    "ccManaged": {
      "type": "string",
      "allowedValues": [
        "yes",
        "no"
      ],
      "defaultValue": "no"
    },
    "ccClusterName": {
      "type": "string",
      "defaultValue": ""
    },
    "ccRangeId": {
      "type": "string",
      "defaultValue": ""
    },
    "ccIpAddress": {
      "type": "string",
      "defaultValue": ""
    },
    "ccSecret": {
      "type": "securestring",
      "defaultValue": ""
    }
  },
  "variables": {
    "computeApiVersion": "2017-03-30",
    "networkApiVersion": "2017-04-01",

    "imagePublisher": "barracudanetworks",
    "imageOffer": "barracuda-ng-firewall",

    "avName": "[concat(parameters('prefix'),'-AV-NGF')]",
    "vNetName": "[concat(parameters('prefix'),'-VNET')]",
    "vNetID": "[resourceId('Microsoft.Network/virtualNetworks',variables('vNetName'))]",
    "subnetNameNGF": "[concat(parameters('prefix'),'-SUBNET-VNET')]",
    "subnetRef": "[concat(variables('vnetID'),'/subnets/',variables('subnetNameNGF'))]",

    "fwVmNameA": "[concat(parameters('prefix'),'-VM-NGF-A')]",
    "fwVmNameB": "[concat(parameters('prefix'),'-VM-NGF-B')]",
    "fwNicNameA": "[concat(variables('fwVmNameA'),'-NIC')]",
    "fwNicNameB": "[concat(variables('fwVmNameB'),'-NIC')]",
    "fwPIPAddressNameA": "[concat(variables('fwVmNameA'),'-PIP')]",
    "fwPIPAddressNameB": "[concat(variables('fwVmNameB'),'-PIP')]",
    "fwPIPAddressType": "Static",

    "lbPIPAddressName": "[concat(parameters('prefix'),'-NGF-LB-PIP')]",
    "dnsNameForNGF": "[toLower( concat( parameters('prefix'), '-ngf-', uniqueString(resourceGroup().id) ) )]",
    "lbName": "[concat(parameters('prefix'),'-LB-NGF')]",
    "lbID": "[resourceId('Microsoft.Network/loadBalancers',variables('lbName'))]",
    "lbPIPID": "[resourceId('Microsoft.Network/publicIPAddresses',variables('lbPIPAddressName'))]",
    "lbFrontEndPoolID": "[concat(variables('lbID'),'/frontendIPConfigurations/loadBalancerFrontend')]",
    "lbBackEndPoolID": "[concat(variables('lbID'),'/backendAddressPools/loadBalancerBackend')]",
    "lbProbeID": "[concat(variables('lbID'),'/probes/TinaProbe')]",

    "adminUsername": "notused",

    "fwSubnetSplit": "[split( parameters( 'subnetPrefixNGF' ), '/' )]",
    "fwSubnetAddrSplit": "[split( variables( 'fwSubnetSplit' )[0], '.' )]",
    "fwSubnetMask": "[variables( 'fwSubnetSplit' )[1]]",
    "fwSubnetDefaultGw": "[concat( variables( 'fwSubnetAddrSplit' )[0], '.', variables( 'fwSubnetAddrSplit' )[1], '.', variables( 'fwSubnetAddrSplit' )[2], '.', add( int( variables( 'fwSubnetAddrSplit' )[3]), 1 ))]",
    "fwVmAddressA": "[concat( variables( 'fwSubnetAddrSplit' )[0], '.', variables( 'fwSubnetAddrSplit' )[1], '.', variables( 'fwSubnetAddrSplit' )[2], '.', add( int( variables( 'fwSubnetAddrSplit' )[3]), 4 ))]",
    "fwVmAddressB": "[concat( variables( 'fwSubnetAddrSplit' )[0], '.', variables( 'fwSubnetAddrSplit' )[1], '.', variables( 'fwSubnetAddrSplit' )[2], '.', add( int( variables( 'fwSubnetAddrSplit' )[3]), 5 ))]",

    "defaultRouteTableName": "[concat( 'route-via-', parameters( 'prefix' ), 'VM-NGF-', resourceGroup().name )]"
  },
  "resources": [
    {
      "apiVersion": "[variables('networkApiVersion')]",
      "type": "Microsoft.Network/virtualNetworks",
      "name": "[variables('vNetName')]",
      "location": "[resourceGroup().location]",
      "properties": {
        "addressSpace": {
          "addressPrefixes": [
            "[parameters('vNetPrefix')]"
          ]
        },
        "subnets": [
          {
            "name": "[variables('subnetNameNGF')]",
            "properties": {
              "addressPrefix": "[parameters('subnetPrefixNGF')]"
            }
          }
        ]
      }
    },
    {
      "apiVersion": "[variables( 'networkApiVersion' )]",
      "type": "Microsoft.Network/routeTables",
      "name": "[variables('defaultRouteTableName')]",
      "location": "[resourceGroup().location]",
      "properties": {
        "routes": [
          {
            "name": "[variables( 'defaultRouteTableName' )]",
            "properties": {
              "addressPrefix": "0.0.0.0/0",
              "nextHopType": "VirtualAppliance",
              "nextHopIpAddress": "[variables('fwVmAddressA')]"
            }
          }
        ]
      }
    },    
    {
      "apiVersion": "[variables('computeApiVersion')]",
      "type": "Microsoft.Compute/availabilitySets",
      "name": "[variables('avName')]",
      "location": "[resourceGroup().location]",
      "dependsOn": [],
      "properties": {
          "platformFaultDomainCount": 2,
          "platformUpdateDomainCount": 5
      },
      "sku": {
        "name": "Aligned"
      }
    },
    {
      "apiVersion": "[variables('networkApiVersion')]",
      "type": "Microsoft.Network/publicIPAddresses",
      "name": "[variables('lbPIPAddressName')]",
      "location": "[resourceGroup().location]",
      "properties": {
        "publicIPAllocationMethod": "[variables('fwPIPAddressType')]",
        "dnsSettings": {
          "domainNameLabel": "[variables('dnsNameForNGF')]"
        }
      }
    },
    {
      "apiVersion": "[variables('networkApiVersion')]",
      "name": "[variables('lbName')]",
      "type": "Microsoft.Network/loadBalancers",
      "location": "[resourceGroup().location]",
      "comments":"LoadBalancer for the Barracuda Next Gen Firewall F cluster",            
      "tags": {
          "displayName": "NGFLB"
      },
      "dependsOn": [
          "[concat('Microsoft.Network/publicIPAddresses/', variables('lbPIPAddressName'))]"
      ],
      "properties": {
          "frontendIPConfigurations": [
              {
                  "name": "loadBalancerFrontEnd",
                  "properties": {
                      "publicIPAddress": {
                          "id": "[variables('lbPIPID')]"
                      }
                  }
              }
          ],
          "backendAddressPools": [
              {
                  "name": "loadBalancerBackend"
              }
          ],
          "loadBalancingRules": [
              {
                  "name": "IPSEC-IKE",
                  "properties": {
                      "frontendIPConfiguration": {
                          "id": "[variables('lbFrontEndPoolID')]"
                      },
                      "backendAddressPool": {
                          "id": "[variables('lbBackEndPoolID')]"
                      },
                      "protocol": "Udp",
                      "frontendPort": 500,
                      "backendPort": 500,
                      "enableFloatingIP": false,
                      "idleTimeoutInMinutes": 5,
                      "probe": {
                          "id": "[variables('lbProbeID')]"
                      }
                  }
              },
              {
                "name": "IPSEC-NATT",
                "properties": {
                    "frontendIPConfiguration": {
                        "id": "[variables('lbFrontEndPoolID')]"
                    },
                    "backendAddressPool": {
                        "id": "[variables('lbBackEndPoolID')]"
                    },
                    "protocol": "Udp",
                    "frontendPort": 4500,
                    "backendPort": 4500,
                    "enableFloatingIP": false,
                    "idleTimeoutInMinutes": 5,
                    "probe": {
                        "id": "[variables('lbProbeID')]"
                    }
                }
              },
              {
                "name": "TINA-UDP",
                "properties": {
                    "frontendIPConfiguration": {
                        "id": "[variables('lbFrontEndPoolID')]"
                    },
                    "backendAddressPool": {
                        "id": "[variables('lbBackEndPoolID')]"
                    },
                    "protocol": "Udp",
                    "frontendPort": 691,
                    "backendPort": 691,
                    "enableFloatingIP": false,
                    "idleTimeoutInMinutes": 5,
                    "probe": {
                        "id": "[variables('lbProbeID')]"
                    }
                }
              },
              {
                "name": "TINA-TCP",
                "properties": {
                    "frontendIPConfiguration": {
                        "id": "[variables('lbFrontEndPoolID')]"
                    },
                    "backendAddressPool": {
                        "id": "[variables('lbBackEndPoolID')]"
                    },
                    "protocol": "Tcp",
                    "frontendPort": 691,
                    "backendPort": 691,
                    "enableFloatingIP": false,
                    "idleTimeoutInMinutes": 5,
                    "probe": {
                        "id": "[variables('lbProbeID')]"
                    }
                }
              }
          ],
          "probes": [
              {
                  "name": "TinaProbe",
                  "properties": {
                      "protocol": "Tcp",
                      "port": 691,
                      "intervalInSeconds": 5,
                      "numberOfProbes": 2
                  }
              }
          ]
      }
    },
    {
      "apiVersion": "[variables('networkApiVersion')]",
      "type": "Microsoft.Network/publicIPAddresses",
      "name": "[variables('fwPIPAddressNameA')]",
      "location": "[resourceGroup().location]",
      "properties": {
        "publicIPAllocationMethod": "[variables('fwPIPAddressType')]"
      }
    },
    {
      "apiVersion": "[variables('networkApiVersion')]",
      "type": "Microsoft.Network/publicIPAddresses",
      "name": "[variables('fwPIPAddressNameB')]",
      "location": "[resourceGroup().location]",
      "properties": {
        "publicIPAllocationMethod": "[variables('fwPIPAddressType')]"
      }
    },
    {
      "apiVersion": "[variables('networkApiVersion')]",
      "type": "Microsoft.Network/networkInterfaces",
      "name": "[variables('fwNicNameA')]",
      "location": "[resourceGroup().location]",
      "dependsOn": [
        "[concat('Microsoft.Network/publicIPAddresses/', variables('fwPIPAddressNameA'))]",
        "[concat('Microsoft.Network/virtualNetworks/', variables('vNetName'))]",
        "[concat('Microsoft.Network/loadBalancers/', variables('lbName'))]"
      ],
      "properties": {
        "ipConfigurations": [
          {
            "name": "ipconfig1",
            "properties": {
              "privateIPAllocationMethod": "Static",
              "privateIPAddress": "[variables( 'fwVmAddressA' )]",
              "publicIPAddress": {
                "id": "[resourceId('Microsoft.Network/publicIPAddresses',variables('fwPIPAddressNameA'))]"
              },
              "subnet": {
                "id": "[variables('subnetRef')]"
              },
              "loadBalancerBackendAddressPools": [
                {
                    "id": "[concat(variables('lbID'), '/backendAddressPools/loadBalancerBackend')]"
                }
              ]
            }
          }
        ]
      }
    },
    {
      "apiVersion": "[variables('networkApiVersion')]",
      "type": "Microsoft.Network/networkInterfaces",
      "name": "[variables('fwNicNameB')]",
      "location": "[resourceGroup().location]",
      "dependsOn": [
        "[concat('Microsoft.Network/publicIPAddresses/', variables('fwPIPAddressNameB'))]",
        "[concat('Microsoft.Network/virtualNetworks/', variables('vNetName'))]",
        "[concat('Microsoft.Network/loadBalancers/', variables('lbName'))]"
      ],
      "properties": {
        "ipConfigurations": [
          {
            "name": "ipconfig1",
            "properties": {
              "privateIPAllocationMethod": "Static",
              "privateIPAddress": "[variables( 'fwVmAddressB' )]",
              "publicIPAddress": {
                "id": "[resourceId('Microsoft.Network/publicIPAddresses',variables('fwPIPAddressNameB'))]"
              },
              "subnet": {
                "id": "[variables('subnetRef')]"
              },
              "loadBalancerBackendAddressPools": [
                {
                    "id": "[concat(variables('lbID'), '/backendAddressPools/loadBalancerBackend')]"
                }
              ]
            }
          }
        ]
      }
    },
    {
      "condition": "[equals(parameters('ccManaged'),'no')]",
      "apiVersion": "[variables('computeApiVersion')]",
      "type": "Microsoft.Compute/virtualMachines",
      "name": "[variables('fwVmNameA')]",
      "location": "[resourceGroup().location]",
      "plan": {
        "name": "[parameters('imageSKU')]",
        "Product": "[variables('imageOffer')]",
        "Publisher": "[variables('imagePublisher')]"
      },
      "dependsOn": [
        "[resourceId('Microsoft.Network/networkInterfaces/', variables('fwNicNameA'))]",
        "[concat('Microsoft.Compute/availabilitySets/', variables('avName'))]"
      ],
      "properties": {
        "availabilitySet": {
          "id": "[resourceId('Microsoft.Compute/availabilitySets',variables('avName'))]"
        },
        "hardwareProfile": {
          "vmSize": "[parameters('vmSize')]"
        },
        "osProfile": {
          "computerName": "[variables('fwVmNameA')]",
          "adminUsername": "[variables('adminUsername')]",
          "adminPassword": "[parameters('adminPassword')]",
          "customData": "[base64(concat('#!/bin/bash\n\n', '/opt/phion/bin/editconf -f /opt/phion/config/configroot/boxnet.conf -d REFS -s gendev_eth0\n', '/opt/phion/bin/editconf -f /opt/phion/config/configroot/boxnet.conf -d RENAMED -s gendev_eth0\n', '/opt/phion/bin/cloud-setmip ', variables('fwVmAddressA'), ' ', variables( 'fwSubnetMask' ), ' ', variables( 'fwSubnetDefaultGw' ), ' >> /tmp/setmip.log'))]"
        },
        "storageProfile": {
          "imageReference": {
            "publisher": "[variables('imagePublisher')]",
            "offer": "[variables('imageOffer')]",
            "sku": "[parameters('imageSKU')]",
            "version": "latest"
          },
          "osDisk": {
            "name": "[concat(variables('fwVmNameA'),'-osdisk')]",
            "caching": "ReadWrite",
            "createOption": "FromImage"
          }
        },
        "networkProfile": {
          "networkInterfaces": [
            {
              "id": "[resourceId('Microsoft.Network/networkInterfaces',variables('fwNicNameA'))]",
              "properties": {
                "primary": true
              }
            }            
          ]
        }
      }
    },
    {
      "condition": "[equals(parameters('ccManaged'),'yes')]",
      "apiVersion": "[variables('computeApiVersion')]",
      "type": "Microsoft.Compute/virtualMachines",
      "name": "[concat(variables('fwVmNameA'),'-CC')]",
      "location": "[resourceGroup().location]",
      "plan": {
        "name": "[parameters('imageSKU')]",
        "Product": "[variables('imageOffer')]",
        "Publisher": "[variables('imagePublisher')]"
      },
      "dependsOn": [
        "[resourceId('Microsoft.Network/networkInterfaces/', variables('fwNicNameA'))]",
        "[concat('Microsoft.Compute/availabilitySets/', variables('avName'))]"
      ],
      "properties": {
        "availabilitySet": {
          "id": "[resourceId('Microsoft.Compute/availabilitySets',variables('avName'))]"
        },
        "hardwareProfile": {
          "vmSize": "[parameters('vmSize')]"
        },
        "osProfile": {
          "computerName": "[variables('fwVmNameA')]",
          "adminUsername": "[variables('adminUsername')]",
          "adminPassword": "[parameters('adminPassword')]",
          "customData": "[base64(concat('#!/bin/bash\n\n', 'echo \"*/2 * * * * root echo \\\"', parameters( 'ccSecret' ), '\\\" | /opt/phion/bin/getpar -a ', parameters('ccIpAddress'), ' -r ', parameters( 'ccRangeId' ), ' -c ', parameters( 'ccClusterName' ), ' -b ', variables( 'fwVmNameA' ), ' -d /opt/phion/update/box.par -s --verbosity 10 >> /tmp/getpar.log && /etc/rc.d/init.d/phion stop && /etc/rc.d/init.d/phion start && rm /etc/cron.d/getpar\" > /etc/cron.d/getpar\n'))]"
        },
        "storageProfile": {
          "imageReference": {
            "publisher": "[variables('imagePublisher')]",
            "offer": "[variables('imageOffer')]",
            "sku": "[parameters('imageSKU')]",
            "version": "latest"
          },
          "osDisk": {
            "name": "[concat(variables('fwVmNameA'),'-osdisk')]",
            "caching": "ReadWrite",
            "createOption": "FromImage"
          }
        },
        "networkProfile": {
          "networkInterfaces": [
            {
              "id": "[resourceId('Microsoft.Network/networkInterfaces',variables('fwNicNameA'))]",
              "properties": {
                "primary": true
              }
            }            
          ]
        }
      }
    },
    {
      "condition": "[equals(parameters('ccManaged'),'no')]",
      "apiVersion": "[variables('computeApiVersion')]",
      "type": "Microsoft.Compute/virtualMachines",
      "name": "[variables('fwVmNameB')]",
      "location": "[resourceGroup().location]",
      "plan": {
        "name": "[parameters('imageSKU')]",
        "Product": "[variables('imageOffer')]",
        "Publisher": "[variables('imagePublisher')]"
      },
      "dependsOn": [
        "[resourceId('Microsoft.Network/networkInterfaces/', variables('fwNicNameB'))]",
        "[concat('Microsoft.Compute/availabilitySets/', variables('avName'))]"
      ],
      "properties": {
        "availabilitySet": {
          "id": "[resourceId('Microsoft.Compute/availabilitySets',variables('avName'))]"
        },
        "hardwareProfile": {
          "vmSize": "[parameters('vmSize')]"
        },
        "osProfile": {
          "computerName": "[variables('fwVmNameB')]",
          "adminUsername": "[variables('adminUsername')]",
          "adminPassword": "[parameters('adminPassword')]",
          "customData": "[base64(concat('#!/bin/bash\n\n', '/opt/phion/bin/editconf -f /opt/phion/config/configroot/boxnet.conf -d REFS -s gendev_eth0\n', '/opt/phion/bin/editconf -f /opt/phion/config/configroot/boxnet.conf -d RENAMED -s gendev_eth0\n', '/opt/phion/bin/cloud-setmip ', variables('fwVmAddressB'), ' ', variables( 'fwSubnetMask' ), ' ', variables( 'fwSubnetDefaultGw' ), ' >> /tmp/setmip.log'))]"
        },
        "storageProfile": {
          "imageReference": {
            "publisher": "[variables('imagePublisher')]",
            "offer": "[variables('imageOffer')]",
            "sku": "[parameters('imageSKU')]",
            "version": "latest"
          },
          "osDisk": {
            "name": "[concat(variables('fwVmNameB'),'-osdisk')]",
            "caching": "ReadWrite",
            "createOption": "FromImage"
          }
        },
        "networkProfile": {
          "networkInterfaces": [
            {
              "id": "[resourceId('Microsoft.Network/networkInterfaces',variables('fwNicNameB'))]",
              "properties": {
                "primary": true
              }
            }
          ]
        }
      }
    },
    {
      "condition": "[equals(parameters('ccManaged'),'yes')]",
      "apiVersion": "[variables('computeApiVersion')]",
      "type": "Microsoft.Compute/virtualMachines",
      "name": "[concat(variables('fwVmNameB'),'-CC')]",
      "location": "[resourceGroup().location]",
      "plan": {
        "name": "[parameters('imageSKU')]",
        "Product": "[variables('imageOffer')]",
        "Publisher": "[variables('imagePublisher')]"
      },
      "dependsOn": [
        "[resourceId('Microsoft.Network/networkInterfaces/', variables('fwNicNameB'))]",
        "[concat('Microsoft.Compute/availabilitySets/', variables('avName'))]"
      ],
      "properties": {
        "availabilitySet": {
          "id": "[resourceId('Microsoft.Compute/availabilitySets',variables('avName'))]"
        },
        "hardwareProfile": {
          "vmSize": "[parameters('vmSize')]"
        },
        "osProfile": {
          "computerName": "[variables('fwVmNameB')]",
          "adminUsername": "[variables('adminUsername')]",
          "adminPassword": "[parameters('adminPassword')]",
          "customData": "[base64(concat('#!/bin/bash\n\n', 'echo \"*/2 * * * * root echo \\\"', parameters( 'ccSecret' ), '\\\" | /opt/phion/bin/getpar -a ', parameters('ccIpAddress'), ' -r ', parameters( 'ccRangeId' ), ' -c ', parameters( 'ccClusterName' ), ' -b ', variables( 'fwVmNameB' ), ' -d /opt/phion/update/box.par -s --verbosity 10 >> /tmp/getpar.log && /etc/rc.d/init.d/phion stop && /etc/rc.d/init.d/phion start && rm /etc/cron.d/getpar\" > /etc/cron.d/getpar\n'))]"
        },
        "storageProfile": {
          "imageReference": {
            "publisher": "[variables('imagePublisher')]",
            "offer": "[variables('imageOffer')]",
            "sku": "[parameters('imageSKU')]",
            "version": "latest"
          },
          "osDisk": {
            "name": "[concat(variables('fwVmNameB'),'-osdisk')]",
            "caching": "ReadWrite",
            "createOption": "FromImage"
          }
        },
        "networkProfile": {
          "networkInterfaces": [
            {
              "id": "[resourceId('Microsoft.Network/networkInterfaces',variables('fwNicNameB'))]",
              "properties": {
                "primary": true
              }
            }
          ]
        }
      }
    }
  ],
  "outputs": {
    "NGF-A": {
      "type": "string",
      "value": "[reference(variables('fwPIPAddressNameA')).ipAddress]"
    },
    "NGF-B": {
      "type": "string",
      "value": "[reference(variables('fwPIPAddressNameA')).ipAddress]"
    },
    "NGF-LB": {
      "type": "string",
      "value": "[reference(variables('lbPIPAddressName')).dnsSettings.fqdn]"
    }
  }
}